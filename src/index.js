// Generated by CoffeeScript 1.10.0
(function() {
  var Dimensions, FormatIdentification, JPEGScanner, Stream, TIFFScanner,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Stream = require("stream");

  FormatIdentification = require("./format_identification");

  JPEGScanner = require("./jpeg_scanner");

  TIFFScanner = require("./tiff_scanner");

  Dimensions = (function(superClass) {
    var SUPPORTED_TYPES, func, name;

    extend(Dimensions, superClass);

    module.exports = Dimensions;

    SUPPORTED_TYPES = ["image/jpeg", "image/png", "image/gif", "image/tiff"];

    Dimensions.canMeasure = function(type) {
      return indexOf.call(SUPPORTED_TYPES, type) >= 0;
    };

    function Dimensions(bufferOrStream) {
      this.end = bind(this.end, this);
      this.write = bind(this.write, this);
      if (Buffer.isBuffer(bufferOrStream)) {
        this.buffer = bufferOrStream;
        this.process();
      } else {
        this.buffer = new Buffer(0);
        this.writable = true;
        if (bufferOrStream) {
          this.stream = bufferOrStream;
          this.stream.on("data", this.write);
          this.stream.on("end", this.end);
        }
      }
    }

    Dimensions.prototype.process = function() {
      if (this.format == null) {
        this.format = this.identifyFormatOf(this.buffer);
      }
      if (this.format) {
        this["extractDimensionsFor" + this.format]();
      }
      if (!this.writable) {
        return this.done();
      }
    };

    for (name in FormatIdentification) {
      func = FormatIdentification[name];
      Dimensions.prototype[name] = func;
    }

    Dimensions.prototype.extractDimensionsForGIF = function() {
      if (this.buffer.length >= 10) {
        this.width = this.buffer.readUInt16LE(6);
        this.height = this.buffer.readUInt16LE(8);
        return this.done();
      }
    };

    Dimensions.prototype.extractDimensionsForPNG = function() {
      if (this.buffer.length >= 24) {
        this.width = this.buffer.readUInt32BE(16);
        this.height = this.buffer.readUInt32BE(20);
        return this.done();
      }
    };

    Dimensions.prototype.extractDimensionsForJPEG = function() {
      var scanner;
      scanner = new JPEGScanner;
      if (scanner.scan(this.buffer)) {
        this.width = scanner.width;
        this.height = scanner.height;
        this.angle = scanner.angle;
        return this.done();
      }
    };

    Dimensions.prototype.extractDimensionsForTIFF = function() {
      var scanner;
      scanner = new TIFFScanner;
      if (scanner.scan(this.buffer)) {
        this.width = scanner.width;
        this.height = scanner.height;
        return this.done();
      }
    };

    Dimensions.prototype.done = function() {
      if (this.stream) {
        this.stream.removeListener("data", this.write);
        this.stream.removeListener("end", this.end);
        delete this.stream;
      }
      delete this.end;
      delete this.write;
      delete this.buffer;
      delete this.format;
      if (this.writable) {
        delete this.writable;
        return this.emit("ready", this.toJSON());
      }
    };

    Dimensions.prototype.toJSON = function() {
      var members, value;
      members = new Object;
      for (name in this) {
        if (!hasProp.call(this, name)) continue;
        value = this[name];
        if (name[0] !== "_") {
          members[name] = value;
        }
      }
      return members;
    };

    Dimensions.prototype.write = function(data) {
      if (this.writable) {
        this.buffer = Buffer.concat([this.buffer, data]);
        this.process();
      }
      return true;
    };

    Dimensions.prototype.end = function(data) {
      if (data != null) {
        this.write(data);
      }
      return this.done();
    };

    return Dimensions;

  })(Stream);

}).call(this);
